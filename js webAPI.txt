window.top和window.name都是window的属性,非严格模式下可以省略window
window.name是一个空字符串
window.top是只读的不能赋值


全局变量和顶级函数，都是window的属性和方法；



alert();confirm();prompt();也是window的内置方法而已；
alert:    1.调用者是window;  2.没有返回值；     3.有参数；   4.弹窗提示；
confirm:  1.调用者是window;  2.有返回值(bool)；  3.有参数；   4.弹窗选择；
prompt:  1.调用者是window;  2.有返回值(str/null)；  3.有参数；   4.弹窗输入；


 setInterval("fn(444)",1000);直接把字符串当执行语句也可以


定时器的高级：
    1.定时器有返回值，是定时器的编号；
    2.定时器可以关闭，利用编号，也就是返回值； clearInterval/Timeout(编号);
                //清除定时器，是定时器停止，不是函数停止，是下一次函数不执行了，这一次还要执行完毕；
                //return是后面的代码不在执行；
    3.定时器的执行，是在页面所有程序执行完毕后才执行的；


location: window的一个属性而已; 只不过值是一个对象；
属性
          console.log(location.href      );//页面地址；
          console.log(location.hash      );//返回url中#后面的内容，包含#
          console.log(location.host      );//主机名，包括端口
          console.log(location.hostname  );//主机名
          console.log(location.pathname  );//url中的路径部分
          console.log(location.protocol  );//协议 一般是http、https
          console.log(location.search	   );//查询字符串

方法
	1.assign(): 页面跳转；记录到历史记录中；
              console.log(location.assign());//不能读取；
              location.assign("http://www.baidu.com")//只能让页面跳转

        2.href;并且会记录在历史记录中
              console.log(location.href);//能够获取，而且是被编译过的；
              location.href = "http://www.taobao.com";//还能够让网页跳转

        3.replace();   页面跳转，不会出现记录；
              location.replace("http://www.jd.com");

        4.reload();    页面刷新；重新加载；
              location.reload();


alert(),confirm(),prompt()都是BOM的方法


history:指的是前进后退刷新历史记录三部分；
       三个方法:后退，前进，刷新；
       back();forward();
       go();  1:前进，0:刷新，-1


navigator: 里面存放着浏览器的类型和运行的系统；
        console.log(navigator.userAgent);//浏览器
        console.log(navigator.platform);//系统



document.getElementsByTagName();通过标签名获取元素节点组成的伪数组；0个也是伪空数组，可以缩小范围


document.getElementsByClassName();通过类名获取元素;
            //IE678不支持；不能缩小范围和byId一样；


document.querySelector();   模拟css选择器；(只选择第一个)
        //ie678不支持；可以缩小范围 


document.querySelectorAll(); 模拟css选择器；(选择全部)//ie678不支持；可以缩小范围 



window.onload: 整个页面上所有的内容，包括css渲染完毕，才能执行这个事件；


1.正常属性;     title;name;src;value...
2.特殊属性;     href;className;id;tagName(只读:大写);innerHTML/innerText;
 注:a.避免点击a链接时其href属性默认跳转页面的解决方式:return false；
    b.通过className添加类名时必须加上其原有的类
    c.tagName: 只读；且读到的为大写
3.表单属性;     disabled;selected;checked;
4.style属性;    style;返回值是对象；


innerHTML和innerText和value的区别
//value: 就是控制单闭合标签的value属性;
//innerHTML: 双闭合标签内部的内容(识别标签);
//innerText: 双闭合标签内部的内容(不识别标签);
老版火狐不支持innerText需要用textContent
 	      function setTxt(ele,str){
                    if(ele.innerText !== undefined){
                        ele.innerText = str;
                    }else{
                        ele.textContent = str;
                    }
                }




style属性是一个对象，只能获取行内样式而不能获取内嵌和外链，赋值也是赋值到
行内，获取不到返回""

style.cssText可以把行内的样式当作字符串获取

oninput检测表单输入事件，不支持ie678,用onpropertychange兼容



1.parentNode; 父节点；兼容很好

2.兄弟节点;  两类：前一个，后一个；兼容性不好；
     带Element的是元素节点，不带Element的什么节点都获取；
     	previous/nextElementSibling;
      	revious/nextSibling;
     ie678不支持带Element的；也就是ie678当初没有考虑到注释文本...

3.单个子节点: 和兄弟节点一样；
                //first/lastElementChild;//ie678不认识他
                //first/lastChild;//ie678只认识他

4.所有子节点;    childNodes;  children;
                        //w3c官方推荐childNodes;
                        //我们用children;最好用；(ie678可能获取注释节点)
//            var ul = li3.parentNode;
//            console.log(ul.childNodes);//连注释节点都算
//            console.log(ul.children);



 //元素节点;属性节点;文本节点;对应nodeType为1，2，3
  注释节点8；
ele.getAttributeNode("id");//获取属性节点






创建节点的方式:
第一种: document.write();在文档中输入;(识别标签)
        缺点：容易覆盖页面，所以几乎不用；
//      document.write("<li>我是document.write()创建的li标签</li>");


第二种: innerHTML;(识别标签)
         优点：书写方便，多标签嵌套尤其好用;
         缺点：容易把原有元素覆盖掉(可以解决);（字符串拼接）
               老元素上的事件会被彻底覆盖掉;（事件委托）     
//       ul.innerHTML += "<li>我是innerHTML创建的li标签</li>";


第三种：document.createElement("标签名");
         优点：不会影响老元素上的事件；
         缺点：多标签嵌/属性套尤其不好用;


添加子元素到父元素中：
         1. ul.appendChild(newLi);//把newLi添加到ul所有子元素的岁末尾；
	如果直接添加则会将该元素移动

	 2. 父节点.insertBefore(A,B);把A以父节点的子节点的形式放到B之前；
	    特殊点：参考节点不能不写
            如果是null和undefined那么功能和appendChild一样；


删除节点有两种方法：
//父节点.removeChild();
//拓展：自己删除自己；
        li2.parentNode.removeChild(li2);
//H5之后新增的;自己删除自己        li.remove();


复制节点：1.深层复制；  2.浅层复制；
       var newLi2 = li2.cloneNode();//不写参数和false；都是浅层复制；


节点的替换; 
父节点.replaceChild(A,B);用A替换父节点中的B
       var newLi2 = li2.cloneNode(true);//true是连同内容一同复制；
                		ul.insertBefore(newLi,null);



console.log(event.srcElement);
 console.dir(event.target);//事件引发者（HTML对象）
 console.dir(this)//当前事件的DOM对象
    