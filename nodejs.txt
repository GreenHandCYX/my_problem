浏览器其实是ECMAScript的一个运行环境
而nodejs是一个基于Chrome v8引擎的JavaScript运行环境，也可以称之为ECMAScript的一个运行环境
Flash是ECMAScript的一个运行环境



当ECMAScript运行在浏览器中时,我们称为javascript(JS)
当ECMAScript运行在Nodejs中时,我们称为Nodejs
当ECMAScript运行在Flash中时,我们称为ActionScript(AS)



跨平台指运行在不同操作系统上的同一软件


dom和bom是浏览器渲染环境扩展的，所以在nodejs中不可用dom和bom对象


nodejs也对ECMAScript进行了扩展

console是全局对象global的属性,global相当于浏览器的window对象


alert(),confirm(),prompt()都是BOM的方法，在nodejs中也不适用



es6中{}内都是块级作用域，块级变量外部不可访问


文件后缀(只是告诉操作系统以何种方式打开文件)不能区分文档类型而是通过MIME来区分

let与const
//使用let来创建一个块级变量
//使用const来创建一个块级常量
//常量声明必须有值
//let和const不存在变量提升
//let声明的变量不允许重复声明
//const声明的常量不允许重复赋值






解构赋值

多余的数字若要赋给一个变量则要写为...变量（此时该变量为一个数组）
[a,b,...c] = [1,2,3,4,5,6];

//使用对象结构是根据左右两侧的属性来对应的
//数组解构是根据左右两侧的索引值一一对应的

//使用对象解构赋值时必须需要使用关键字声明，不加会作为对象或块解析而不是结构
//使用数组解构赋值时必须不需要使用关键字声明

单个字符串也有长度,也可以通过索引一一对应
let [e,f,g] = 'abc';
console.log(e,f,g)//a b c


//使用对象解构时,可以简写,相当于var {name:name,age:age}={name:'小明',age:16}
var {name,age}={name:'小明',age:16}
console.log(name,age)

//右边缺少用undefined补齐
var {name,age}={age:16}
console.log(name,age);//undefined 16

扩展
var {name,age,childs:{name,age}} ={name:'小明',age:16,childs:{name:'小小明',age:10}}
console.log(name);
console.log(age);
console.log(childs);//此时的childs是属性而非变量childs,所以报错




字符串的扩展：

//以某字符开头
console.log(str.startsWith('my'))
//以某字符结尾
console.log(str.endsWith('my'));
//任意位置是否包含某字符
console.log(str.includes('is'));

//重复某个字符
var ha = '哈';
console.log(ha.repeat(5));

//用反引号创建的模板字符串可以解析变量
let [name] = ['小明'];
let str = `my name is ${name}`;
console.log(str);






数组的扩展:
//创建一个新数组,一个参数时也作为数组的单元
var arr4 = Array.of(2,3,4);
console.log(arr4)

//返回满足条件的项
// var res = arr.find(function(val,key){
//     // console.log(key,val)
//     return val > 'a';
// })

//返回满足条件的项的索引
var k = arr.findIndex(function(val,key){
    // console.log(key,val)
    return val > 'a';
})

var arr = Array.of('a','b','c');
//将数组拆分输出而不是以数组的形式输出
console.log(...arr);//a b c






函数的扩展:
//在es6中定义函数时可以设置默认参数值
function sayHi(name='小红'){
    console.log('你好'+name)
}
sayHi();

//函数的解构赋值:
//多余的实参可以以数组的形式赋值给...的形参
function sayHi(name,age,...gender){
    console.log(name);
    console.log(age);
    console.log(gender);
}
sayHi('小红',16,'女',98);


箭头函数
//具名函数
let fn = (arg) => {
    console.log(arg);
    console.log('我是箭头函数')
}
fn('测试');

//匿名函数
setTimeout(()=>{
    console.log('我是匿名的箭头函数')
},2000);

//简写
var bar = () => 'hello';
//相当于
// var  bar = () => {return 'hello'};



//在nodejs将很多常用功能进行了封装，称为模块


//nodejs安装时会自动安装很多模块称为系统模块,如fs path os http




os模块

//os模块封装了读取系统信息的功能
//使用os模块，需先使用require将其引入

//require需传入系统模块的名称,并会得到一个返回值
let os = require('os');
// console.log(os)
// console.log(os.hostname());
// console.log(os.cpus());
console.log(os.userInfo());




fs模块

//mkdir可以支持两个参数
//第一个参数为目录名称
//第二个参数为回调函数，操作创建结果，例如存在再创建则提示错误信息
// fs.mkdir('test',(err) => {
//     //如果有错误err为一个对象，描述错误的原因
//     //如果没有错误为null
//     console.log(err)
// });

//在指定文件中创建文件
//第一个参数为指定要在哪里创建什么文件的路径
//第二个参数为写入文件内的内容,不传会将undefined写入
//第三个参数为回调函数
fs.writeFile('./test/aa.html','<h1>hello world</h1>',(err)=>{
    if(!err){
        console.log('文件创建成功')
    }
});






path模块
//1.parse方法可以解析文件目录相关信息
let img = './images/20171024/logo.png';
// console.log(path.parse(img));


// let {dir,name,ext} = path.parse(img);
// console.log(dir,name,ext);



//2.dirname方法可以直接获取目录名称
// let dir = path.dirname(img);
// console.log(dir)


//3.extname方法可以获取文件后缀
// let ext = path.extname(img);
// console.log(ext)


//4.join方法可以处理多个路径,会自动根据操作系统的类型加路径标识符/或\
// console.log(path.join('./a','./b','./c'));// a/b/c
//console.log(path.join('a','b','c','../d'));// a\b\d

//Linux使用/
//window使用 / 和 \

var a = './abc/aa';
var b = 'abc/b';
// a+b;//./abc/aaabc/b
console.log(path.join(a,b))//可以自动添加路径标识符





使用npm install 安装和npm uninstall卸载时，会先查找当前目录有没有node_modules如果有则下载到这个目录
没有则返回上一级查找 若一直没有则在当前目录创建node_modules




npm全局安装的路径C:\Users\10945\AppData\Roaming\npm\node_modules，
全局安装的是一个工具，通过命令来访问



访问国内类似cnpm需要
npm install 模块名 --registry=其他地址

也可以通过配置npm可以实现默认为淘宝的地址
nmp config set registry https://registry.npm.taobao.org



使用npm进行本地安装时会优先查找当前目录下存不存在一个node_modules的目录,存在就在这个目录下安装模块，如果不存在则去上一级
目录（只指一级父目录）查有没有node_modules，如果都没有则在当前目录下创建一个 node_modules并在其下安装模块




require:

1.require();如果参数没有以../或./开头会自动当作模块处理，并且会在当前目录下查找有没有node_modules这样一个特殊目录,m
如没有则去其上一级目录查找(只指一级父目录),若没有node_modules则会将require加载的模块视为系统模块


2.nodejs会自动将.js和.json结尾的文件视为模块，所以在require加载模块时,可以不加后缀


3.在加载一个模块文件包（多个文件组成的一个目录）时，会优先查找其目录中有没有index.js，如果有则当作一个目录对待，如果没有则视为.js或.json文件

4.模块文件包通常需要一个说明称为包描述文件（这个文件的名字固定的为package.json，在这个描述文件中可以写任意内容，只要符合json语法，但有几项是必须的如版本号，模块名，作者）
一般通过npm用命令行创建，需要在这个包的 根目录下 通过 npm init 创建
当包中不办含index.js时，会使用package.json中main指定的入口






nodejs新增了一个专门将模块内部函数或变量公开的对象module.exports相当于模块的返回值，在require时当作返回值返回
用法:
module.exports.add = function(){};
module.exports = {
	add:function(){}
}
exports类似于module.exports相当于exports = module.exports
此时就只能在exports对象上加属性而不能把一个新对象赋给它
exports.add = {}
exports ={}//错误，就不再指向module.exports了





http模块中处理传递的参数:传递方式(req.method)
1.get方式的参数通过url模块来处理:nodejs中的url系统模块可用来专门处理地址上的参数
url.parse(req.url,true).query
2.post方式的参数通过监听data事件和end事件来获取,通过querystring模块来处理
var postdata = '';
req.on('data',(chunk)=>{
postdata += chunk;
})
req.on('end',()=>{
console.log(querystring.parse(postdata))
})


通过 url.parse(req.url).pathname来获取路由




fs.readFile读取指定的内容作为响应结果传回页面
        //fs模块的readfile方法第二个参数是防止解析时编码造成的错误
        fs.readFile('./index.html','utf-8',(err,data)=>{
            //data指读取到的内容
           if(!err){
                res.write(data);
                res.end();
           }
        })



 通过mime模块的getType属性获取指定路径的MIME类型
 'Content-Type':mime.getType(realPath)







路径的概念：
网络路径(服务器访问地址 )与目录不是一一对应的
网络路径中 / 表示项目的根

文件路径与目录是一一对应的
文件路径中 windows系统中盘符表示根 linux系统 /表示根

相对路径是以.或..开头
绝对路径是以根开头






全局模块less对less文件进行编译
//lessc .\base.less base.css



通过browser-sync模块可以实现对css，html等文件的实时更改同步
// browser-sync start --server --files "**/*.css, **/*.html"




gulp模块（需要在全局和本地都安装）
//全局的gulp(通过命令行+任务名)用来执行任务
//本地的gulp(在js文件中引用)用来制定任务
gulp模块的作用:
//可以将压缩css作为一个任务
//也可将less转成css当成一个任务
//也可以将js进行合并当成一个任务
用法：
//将less转为css  通过模块gulp-less
gulp.task('less2css',function(){
    //只要将任务执行就可以实现了
    console.log('css转换成功');
    //通过gulp.src指定需要将那些资源进行转换(路径)
    //通过模块gulp-less来实现真正的转换,需要通过pipe传递给less,再通过gulp.dest将处理后的文件放置在./css文件（不存在该文件会自动创建）下
    gulp.src('./less/*.less').pipe(less()).pipe(gulp.dest('./css'));
   
})
//合并js   通过模块gulp-concat
gulp.task('hebing',function(){
    //将你要执行的任务代码放在这
     //通过gulp.src指定需要合并的资源(路径)
     //通过模块gulp-concat可以实现js的合并
     gulp.src('./libs/*.js').pipe(concat('a.js')).pipe(gulp.dest('./js'));

})







//配置模板引擎
//更改默认查找路径，默认是在/下查找
template.defaults.root = __dirname;
// 默认后缀名。默认是'.art'
template.defaults.extname = '.html';

这些设置之后调用template(模板路径名,数据),其中的第一个参数就会自动解析为root下的后缀为extname的模板路径名

//为防止在读取页面对页面本身的模板也进行解析需要更改后台模板引擎的默认解析模式（将{{}}改为## ##）
template.defaults.rules[1].test = /##([@#]?)[ \t]*(\/?)([\w\W]*?)[ \t]*##/;



//使用第三方模块来操作数据库
let mysql = require('mysql');
//通过mysql模块提供的的方法实现对mysql数据库的操作
//有如下方法:
//a)连接数据库
let connection = mysql.createConnection({
    host     : '127.0.0.1',
    user     : 'root',
    password : '123456',
    database : 'wish'
})
//b)执行SQL语句
//查询
connection.query('SELECT * FROM lists',(err,rows)=>{
    if(!err){
        console.log(rows);
    }
})



为了避免字符串的拼接mysql模块进行了封装处理，可以使用?充当一个占位符，表示此处将来会替换为一个变量
// let username = 'itcast';
// let no = 1;
// connection.query("select * from lists where username = ? and no = ?",[username,no],(err,rows)=>{
//     console.log(rows)
// })
也可以将问号视为一个条件
 connection.query('INSERT INTO lists SET ?',{username:username,no:no})





npm init可以将依赖的信息放入到package.json中
再安装其他模块时需npm i mysql --save将依赖信息放入package.json中
这样在删除或没有node_modules时直接通过npm i 就会自动加载package.json中的依赖项

npm i gulp --save-dev指安装只在开发阶段所依赖的模块